Problem Description
You will implement an application to handle the basic operations of a library, including adding patrons, adding books, and searching them out. The following UML class diagram depicts the classes you will use to implement your application; the main program is not depicted. The following section will provide details and implementation hints. This is part 1 of a 2-part assignment. In PA7, you will be setting up the classes and implementing some base functionality. In PA8, we will be expanding on this functionality.

Implementation Details
Source Files
Your main menu program will live inside a function called mainMenu which will take a library object as its only input parameter. It will return nothing. Put the prototype in a header function and the implementation in a menu.cpp file.

Implement each class using a .h and .cpp (e.g., Book.h and Book.cpp) files.

Menu Program
This program will display a menu providing the library's users with several functions. Again, the menu will be implemented as its own function using a menu.h and menu.cpp file.

Your application will display the following menu on the terminal console:

---------------------------------
            Main Menu
---------------------------------
1) Add Patron
2) Add Book
3) Search for Patron
4) Search for Book
                         99) EXIT
---------------------------------

As the program starts, it instantiates the Library class. This object will represent the library, and all the calls to implement options 1 through 4 should call methods from this object.

Option (1): the program asks the user for the patron’s name, address, and phone number and calls the library addPatron method.

Option (2): the program asks the user for the book’s title and the number of pages and calls the library addBook method.

Option (3): the program asks for a patron’s name and calls the searchPatron method from the library. If a patron matches the name (equality), it will print all the patron’s information to the console.

Option (4): the program asks for a book’s title and calls the searchBook method from the library. If a book matches the title, it will print the book’s title and the number of pages to the console.

Option (99): asks the user for confirmation and terminates the program.

If you user inputs an Invalid Option, you should cout the phrase: "Invalid choice. Please try again." and end the line before asking for another input from the user.

The program should keep running until the user selects to terminate the program.

All objects (library, patron, and books) should be allocated dynamically using pointers.

Class Descriptions
Getters and setter are not shown but you should still implement all relevant getters and setters.

Class Library
Member Variables
name: string : Represents the name of the library

patrons: vector<Patron*> : A vector used to store a list of all the patrons in the library

book: vector<Book*> : A vector used to store all the books present in the library

Remember to allocate new Patron and Book objects using dynamic memory and store a pointer to them in your vectors.

Member Functions
Constructors: initialize the object correctly. Be careful with initializing the vector objects.

Destructor: deletes all loans, books, and patrons. Be careful with the order.

searchBook: searches the books list for a book that matches the title. Returns the pointer to the object or nullptr.

searchPatron: searches the patrons list for a patron that matches the name. Returns the pointer to the object or nullptr.

addBook: when a book with the given title does not exist already (uses searchBook), it creates a new Book and adds it to the books list. If the book exists, do nothing.

addPatron: when a patron with the given title does not exist already (uses searchPatron), it creates a new Patron and adds it to the patrons list. If the patron exists, do nothing.

Class Book
Member Variables
title: string : The title of the book

numPages : int : The number of pages the book contains.

Member Functions
Constructors: initialize the object correctly.

Destructor: sets all pointers to nullptr. The Book class does not create or delete objects.

Class Patron
Member Variables
name : string : The name of the patron

address : string : The address of the patron

phoneNumber: string : The phone number of the patron

Member Functions
Constructors: initialize the object correctly. Be careful with initializing the vector objects.

Destructor: sets all pointers to nullptr. The Patron class does not create or delete objects.

UML Diagram
vector(Book*) books
*
1
vector(Patron*) patrons
*
1
Book
-string title
-int numPages
+Book(const string &title, int numPages)
+~Book()
+string getTitle() : const
+int getNumPages() : const
+void setTitle(const string &title)
+void setNumPages(int numPages)
Library
-string name
+Library(const string &name)
+~Library()
+string getName() : const
+vector getBookList() : const
+vector getPatronList() : const
+Book* searchBook(const string &title)
+Patron* searchPatron(const string &name)
+void addBook(const string &title, int numPages)
+void addPatron(const string &name, const string &address, const string &phoneNumber)
Patron
-string name
-string address
-string phoneNumber
+Patron(const string &name, const string &address, const string &phoneNumber)
+~Patron()
+string getName() : const
+string getAddress() : const
+string getPhoneNumber() : const
+void setName(const string &name)
+void setAddress(const string &address)
+void setPhoneNumber(const string &phoneNumber)
Development Tips
Create all classes.
Then add the methods to the .h files and generate their implementations in the .cpp files.
Compile to check for errors.
It is recommended to implement the Book and Patron classes, then the menu, and one operation from the menu to the Library and test it; e.g., add patron functionality completely.
You can use the debugger to see that the objects are correctly created and stored in the library’s vectors.
Be careful with the destructor implementation.
Testing
It is expected that you are able to test your programs thoroughly and carefully using your own methods and code. You may wish to cout certain lines to track output or what is being returned by a function. You may also wish to use the debugger as shown in class. Consider borderline cases and review the output correctly.
You can debug using the console by inputting values to be tested and verifying that they are correct.
Once you are confident your code is running as expected, you can run your code against the unit tests in the autograder.
A makefile is not provided for this assignment. Instead, object files containing unit test code are provided for you and you must run the build commands to compile the unit tests. The files are still within the tests directory.
Compiling
It is expected that you are able to compile and run your own code without relying solely on other tools. Here is the general format for g++ (you leave out the [] characters when actually writing the commands ):

g++ [relevant setting and flags. These usually start with a '-'] [list of files to link together separated by a space : .cpp, .o, .a etc] -o [name of the output file you wish to use]


The g++ build command does use a few extra settings when compiling with the unit tests. The additional options and what they signify are explained here:

-std=c++14 : This should be familiar to you as it is used in class every day. It specifies the version of the C++ standard library to use, which is C++14 for this class.

-isystem ./tests/googletest/include : This tells g++ to treat that directory as a "system include directory." This essentially reduces the warning level for headers found in that directory, so warnings from those headers won't be as strict as for your main project files. This is useful for external libraries, like Google Test, so that you aren't flooded with warnings from code you didn't write.

-g : This option adds debugging information to the executable file, which can be used by debugging tools such as GDB. This makes it possible to step through the code line-by-line and inspect variables while debugging.

-Wall : Enables most of the commonly used warning flags for the compiler. It stands for "warn all". This helps catch common coding mistakes.

-Wextra : Enables some additional warning flags that aren't covered by -Wall. It's useful for catching even more potential issues.

-pthread : Enables support for multithreading with the pthreads library. This sets flags for both the preprocessor and linker. Google Test uses multithreading which is why we are including it.

-lpthread: Links the pthread library to the resulting executable. In essence, it ensures that the threading functions you're using are available in the resulting binary.

[.cpp files, .o files, and .a files] : Now, list off any .cpp source files, .o object files, and .a static library files that need to be included in the build. For all of these, you must include the relative file path for any files that aren't in your current working directory.

You will first list off any .cpp files needed by your program to run. In general, if your code uses an #include "*.h" statement, you will put the corresponding .cpp file here.
Then, add the object file for the test(s) you wish to run. Remember you must also include the relative file path if you are in a different working directory from the .o file (for example, ../tests/ if you are in the src folder or just tests/ if you at the root of the repo).
Lastly, include the file gtest_main.a. This file contains the main program needed to launch the unit tests against your code.
Remember: A build must include exactly one (1) main function so you can't include your own main when running the unit tests.
-o : This option lets you specify the name of the file you want g++ to output the executable code. If a file with that name already exists, it will be overwritten. The default output file is a.out if you don't include this option.

Here is an example of a build command that could be used for this assignment. In this example, the working directory is src:

g++ -isystem ./tests/googletest/include -std=c++14 -g -Wall -Wextra -pthread -lpthread Book.cpp Patron.cpp Library.cpp ../tests/addPatron_test.o ../tests/gtest_main.a -o addPatron_test


Modify it as needed to run the tests as you wish. The autograder will also still run on each push to your repo if you prefer to test that way.

REMEMBER
You should not soley rely on these unit tests to debug your code. It can be far more helpful to use the debugger to track down errors. The unit tests should be more of a "final check" rather than the only way you test your code.

Running an executable
./a.out : This is a command to run the compiled program (using a.out as an example). The ./ simply tells the shell to execute the program located in the current directory.

Commands like g++ or cd are globally visible on the system PATH and therefore don't need their file paths included when they are invoked. Our executables are not globally visible and therefore need to be prefixed with their file paths.

Rubric
Here is the breakdown of the tests, what they test, and how many marks they are worth.

Test Name	Description	Marks
gettersAndSetters_test	Ensures getters and setters for the classes are set-up correctly	10
addBook_test	Checks if a Book can be added to a Library	15
addPatron_test	Checks if a Patron can be added to a Library	15
searchBook_test	Checks if a Book can be retrieved from a Library	15
searchPatron_test	Checks if a Patron can be retrieved from a Library	15
mainMenu_test	Tests if the functions work with the main menu	10
NOTE
The middle 4 tests are solely testing the functions themselves and don't require the main menu to be implemented to work.

Grading and Policies
Assignments on Canvas will be recorded out of 100 marks.
The grading of homework is a combination of completeness and correctness of the outputs and programming style. Completeness and correctness (80 marks) will be assessed automatically through testing on GitHub Classroom, while instructors and TAs will assess the programming style (20 marks).
CODE STYLE
A detailed review of the code (style and rules) will be conducted.
Elements to be considered:
Documentation Comments. (see style guide)
Code Indentation
Clarity of the code.
Variable naming and scope.
Proper use of tools
This includes following the coding style discussed during lectures.
Function declaration and definition placing.
Using of appropriate C++ structures and operations (e.g., static_cast, array/vector, etc.)
Thought process.
Although we don't assess performance, we assess that the development of the code was though through and the control structures were appropriately used.
Exception Handling
NAMING CONVENTIONS
Follow the naming conventions used so far in class.
Variables should be localized with the correct scope, datatype, and their names must be pnemonic.
Coding style will be reviewed and your assessment grade may be impacted due to that as described in our syllabus.
Remember that homework must be completed individually without help (human or AI).
Submission
BE AWARE
If you don't sync (push) with the Classroom Repo, your work will not actually be submitted!

Your Codespace will autosave as you go as a safety mechanism against unexpected crashes. However, these changes sit in a local copy that is not considered permanent. The autograder lives on GitHub not your Codespace. While you can run the tests in the Codespace, the Autograder cannot see your work unless you commit and sync your work back to GitHub to submit. You must commit and push to the Classroom repo to submit your assignment. No credit will be given for unsubmitted work.

Double-check your submission
Double checking your submission should be considered a mandatory step. It allows you to ensure that the tests run as expected on the Autograder itself. It is the final authority on the tests passing or not; even if you think your code works in the Codespace.

If you still are having issues working with GitHub and Codespaces, first check the FAQ page to see if something there fixes your issue.
Then, if your issue still isn't resolved, please meet with your TAs (Lexi and James) during office hours or come to an SSL session for assistance.